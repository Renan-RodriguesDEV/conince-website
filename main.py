# hash_bench_app.py
import time

import bcrypt
import matplotlib.pyplot as plt
import streamlit as st
from argon2 import PasswordHasher

st.set_page_config(page_title="HashBench - Argon2id vs bcrypt", layout="centered")

st.title("üîê HashBench - Compara√ß√£o Argon2id vs bcrypt")
st.write(
    """
    Este app compara o tempo de hashing de **Argon2id** e **bcrypt**.
    Ajuste os par√¢metros abaixo e veja como o custo de processamento cresce.
    """
)

# Entrada do usu√°rio
password = st.text_input("Digite uma senha de teste:", value="senha123")

bcrypt_cost = st.slider("Custo do bcrypt (2^n)", 4, 15, 12)
argon_time_cost = st.slider("Argon2id - Time Cost", 1, 5, 2)
argon_mem_cost = st.slider(
    "Argon2id - Memory Cost (em KB)", 8192, 65536, 16384, step=4096
)
argon_parallelism = st.slider("Argon2id - Paralelismo", 1, 8, 2)

# Benchmark
results = {}

# bcrypt
start = time.time()
salt = bcrypt.gensalt(rounds=bcrypt_cost)
hashed_bcrypt = bcrypt.hashpw(password.encode(), salt)
end = time.time()
results["bcrypt"] = end - start

# Argon2id
ph = PasswordHasher(
    time_cost=argon_time_cost,
    memory_cost=argon_mem_cost,
    parallelism=argon_parallelism,
    hash_len=32,
)
start = time.time()
try:
    hashed_argon = ph.hash(password)
    end = time.time()
    results["argon2id"] = end - start
except Exception as e:
    st.error(f"Erro ao gerar hash Argon2: {e}")
    results["argon2id"] = None

st.subheader("‚è±Ô∏è Resultados de Tempo (segundos)")
st.write(results)

# Plot
fig, ax = plt.subplots()
ax.bar(results.keys(), results.values(), color=["#ff9800", "#3f51b5"])
ax.set_ylabel("Tempo (s)")
ax.set_title("Compara√ß√£o de desempenho Argon2id vs bcrypt")
st.pyplot(fig)

# Explica√ß√£o
st.markdown(
    """
    ### üìå Interpreta√ß√£o
    - **bcrypt**: custo aumenta exponencialmente com o par√¢metro *cost*.  
    - **Argon2id**: al√©m do *time_cost*, o par√¢metro de **mem√≥ria** dificulta ataques paralelos em GPU/ASIC.  
    - Ambos s√£o seguros contra ataques cl√°ssicos, mas **Shor** amea√ßa RSA/ECC, n√£o esses algoritmos de hashing de senha.  
    - Grover daria apenas acelera√ß√£o quadr√°tica ‚Üí o Argon2id continua robusto, pois √© *memory-hard*.  
    """
)

st.html(
    """
    <ul>
      <li><a href="https://legacy.cryptool.org/en/cto/rsa-step-by-step" target="_blank" rel="noopener noreferrer">Simulador online de Chave RSA</a></li>
      <li><a href="https://lab.quantumflytrap.com/lab/bb84" target="_blank" rel="noopener noreferrer">Simulador online de Chave QKD</a></li>
    </ul>
    """,
)

with st.popover(
    "Sobre Utiliza√ß√£o do Simulador online de RSA (CryptoTool ‚Äì 'step by step')"
):
    st.markdown(
        """
    ### 1) Simulador online de RSA (CryptoTool ‚Äì "step by step")
    Link: https://legacy.cryptool.org/en/cto/rsa-step-by-step

    **Tempo estimado:** 3‚Äì4 min

    **Passos**
    1. **Abrir** o simulador e escolher o modo **"step by step"**.  
    2. **Escolher primos** `p` e `q` ‚Äî use os sugeridos ou um exemplo did√°tico: `p = 61`, `q = 53`.  
    3. **Compute**: o simulador mostra `n = p * q = 3233` e `œÜ(n) = (p-1)*(q-1) = 3120`.  
       - Dica: ‚Äún √© o m√≥dulo; œÜ(n) ajuda a achar a chave privada.‚Äù  
    4. **Escolher e** (expoente p√∫blico) ‚Äî ex.: `e = 17` (ou `65537`).  
       - Dica: ‚Äúe precisa ser coprimo de œÜ(n).‚Äù  
    5. **Compute d** ‚Äî o simulador calcula `d` (para `e=17`, `d = 2753`).  
       - Dica: ‚Äúd √© o inverso modular de e mod œÜ(n).‚Äù  
    6. **Encrypt**: testar com um texto curto (ex.: `PAO`), observar `C = M^e mod n`.  
    7. **Decrypt**: verificar que `M = C^d mod n` recupera a mensagem.

    **Resumo visual**
    - Mostrar as caixas de **Public key** `(e, n)` e **Private key** `(d, n)`.  
    - Explicar que a seguran√ßa depende da fatora√ß√£o de `n` (dif√≠cil classicamente; vulner√°vel ao algoritmo de Shor em computadores qu√¢nticos).

    **O que observar**
    - Campos `p, q, n, œÜ(n), e, d` aparecendo passo a passo.  
    - Entrada/sa√≠da do Encrypt/Decrypt (texto ‚Üî n√∫mero).

    **Mensagem de impacto**
    > RSA √© seguro hoje; grandes computadores qu√¢nticos rodando Shor poderiam quebrar RSA/ECC.
    """
    )
with st.popover(
    "Sobre Utiliza√ß√£o do Simulador online de QKD ‚Äì BB84 (Quantum Flytrap Lab)"
):
    st.markdown(
        """
    2) Simulador online de QKD ‚Äì BB84 (Quantum Flytrap Lab)

    Link: https://lab.quantumflytrap.com/lab/bb84

    Passo a passo (3‚Äì5 min)

    1. Abra o simulador do BB84.
    2. Configurar o experimento:
       - Se houver op√ß√£o, selecione n√∫mero de bits/qubits (ex.: `64`).
       - Clique em `Run` / `Start` / `Generate` (o nome do bot√£o pode variar).
       - O que falar: ‚ÄúAlice envia qubits em bases aleat√≥rias; Bob mede em bases aleat√≥rias.‚Äù
    3. Ver bits e bases:
       - A interface
O que falar: ‚ÄúAlice envia qubits em bases aleat√≥rias; Bob mede em bases aleat√≥rias.‚Äù

Ver bits e bases

A interface mostra bits de Alice (0/1), bases de Alice (‚®Å/√ó) e bases de Bob.

Mostre os erros quando as bases n√£o coincidem.
O que falar: ‚ÄúQuando as bases coincidem, medimos corretamente; quando n√£o, d√° ru√≠do.‚Äù

Etapa de ‚Äòsifting‚Äô (peneiramento)

Clique em Sift/Keep matching bases (ou bot√£o equivalente).

O simulador mant√©m ~50% dos bits (os de bases coincidentes) ‚Üí chave bruta.
O que falar: ‚ÄúMetade dos bits vira nossa chave compartilhada.‚Äù

Estimar erros (QBER)

Use Error estimation / Check sample (se existir).

Veja o QBER (quantum bit error rate).
O que falar: ‚ÄúSe houver espi√£o (Eve), o QBER sobe.‚Äù

Ativar o atacante (Eve)

Procure um bot√£o/slider Eve (Intercept-Resend).

Rode de novo ‚Üí note QBER alto (tipicamente ~25%).
O que falar: ‚ÄúA tentativa de espionagem deixa rastros; detectamos pela taxa de erros.‚Äù

Corre√ß√£o de erros e privacidade

Se houver, clique em Error correction / Privacy amplification.

Mostre a chave final (menor, por√©m segura).
O que falar: ‚ÄúMesmo com ru√≠do, refinamos a chave final segura.
    """
    )

    st.html("""
    <div style="position: fixed; bottom: 10px; left: 0; width: 100%; text-align: center; color: #666; font-size:12px;">
        Created by: Sr. Me. Renan Supremo, Pedro e Mariani
    </div>
    """)
